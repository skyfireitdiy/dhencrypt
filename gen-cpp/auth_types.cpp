/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "auth_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

Token::~Token() noexcept
{
}

void Token::__set_prime(const std::string &val)
{
    this->prime = val;
}

void Token::__set_generator(const std::string &val)
{
    this->generator = val;
}

void Token::__set_publicKey(const std::string &val)
{
    this->publicKey = val;
}
std::ostream &operator<<(std::ostream &out, const Token &obj)
{
    obj.printTo(out);
    return out;
}

uint32_t Token::read(::apache::thrift::protocol::TProtocol *iprot)
{

    ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP)
        {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING)
            {
                xfer += iprot->readString(this->prime);
                this->__isset.prime = true;
            }
            else
            {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRING)
            {
                xfer += iprot->readString(this->generator);
                this->__isset.generator = true;
            }
            else
            {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING)
            {
                xfer += iprot->readString(this->publicKey);
                this->__isset.publicKey = true;
            }
            else
            {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t Token::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("Token");

    xfer += oprot->writeFieldBegin("prime", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->prime);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("generator", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->generator);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("publicKey", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->publicKey);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(Token &a, Token &b)
{
    using ::std::swap;
    swap(a.prime, b.prime);
    swap(a.generator, b.generator);
    swap(a.publicKey, b.publicKey);
    swap(a.__isset, b.__isset);
}

Token::Token(const Token &other0)
{
    prime = other0.prime;
    generator = other0.generator;
    publicKey = other0.publicKey;
    __isset = other0.__isset;
}
Token &Token::operator=(const Token &other1)
{
    prime = other1.prime;
    generator = other1.generator;
    publicKey = other1.publicKey;
    __isset = other1.__isset;
    return *this;
}
void Token::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "Token(";
    out << "prime=" << to_string(prime);
    out << ", "
        << "generator=" << to_string(generator);
    out << ", "
        << "publicKey=" << to_string(publicKey);
    out << ")";
}

AuthReq::~AuthReq() noexcept
{
}

void AuthReq::__set_token(const Token &val)
{
    this->token = val;
}
std::ostream &operator<<(std::ostream &out, const AuthReq &obj)
{
    obj.printTo(out);
    return out;
}

uint32_t AuthReq::read(::apache::thrift::protocol::TProtocol *iprot)
{

    ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP)
        {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT)
            {
                xfer += this->token.read(iprot);
                this->__isset.token = true;
            }
            else
            {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t AuthReq::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("AuthReq");

    xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->token.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(AuthReq &a, AuthReq &b)
{
    using ::std::swap;
    swap(a.token, b.token);
    swap(a.__isset, b.__isset);
}

AuthReq::AuthReq(const AuthReq &other2)
{
    token = other2.token;
    __isset = other2.__isset;
}
AuthReq &AuthReq::operator=(const AuthReq &other3)
{
    token = other3.token;
    __isset = other3.__isset;
    return *this;
}
void AuthReq::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "AuthReq(";
    out << "token=" << to_string(token);
    out << ")";
}

AuthResp::~AuthResp() noexcept
{
}

void AuthResp::__set_publicKey(const std::string &val)
{
    this->publicKey = val;
}
std::ostream &operator<<(std::ostream &out, const AuthResp &obj)
{
    obj.printTo(out);
    return out;
}

uint32_t AuthResp::read(::apache::thrift::protocol::TProtocol *iprot)
{

    ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;

    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP)
        {
            break;
        }
        switch (fid)
        {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING)
            {
                xfer += iprot->readString(this->publicKey);
                this->__isset.publicKey = true;
            }
            else
            {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t AuthResp::write(::apache::thrift::protocol::TProtocol *oprot) const
{
    uint32_t xfer = 0;
    ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
    xfer += oprot->writeStructBegin("AuthResp");

    xfer += oprot->writeFieldBegin("publicKey", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->publicKey);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}

void swap(AuthResp &a, AuthResp &b)
{
    using ::std::swap;
    swap(a.publicKey, b.publicKey);
    swap(a.__isset, b.__isset);
}

AuthResp::AuthResp(const AuthResp &other4)
{
    publicKey = other4.publicKey;
    __isset = other4.__isset;
}
AuthResp &AuthResp::operator=(const AuthResp &other5)
{
    publicKey = other5.publicKey;
    __isset = other5.__isset;
    return *this;
}
void AuthResp::printTo(std::ostream &out) const
{
    using ::apache::thrift::to_string;
    out << "AuthResp(";
    out << "publicKey=" << to_string(publicKey);
    out << ")";
}
