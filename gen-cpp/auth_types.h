/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef auth_TYPES_H
#define auth_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class Token;

class AuthReq;

class AuthResp;

typedef struct _Token__isset {
  _Token__isset() : prime(false), generator(false), publicKey(false) {}
  bool prime :1;
  bool generator :1;
  bool publicKey :1;
} _Token__isset;

class Token : public virtual ::apache::thrift::TBase {
 public:

  Token(const Token&);
  Token& operator=(const Token&);
  Token() noexcept
        : prime(),
          generator(),
          publicKey() {
  }

  virtual ~Token() noexcept;
  std::string prime;
  std::string generator;
  std::string publicKey;

  _Token__isset __isset;

  void __set_prime(const std::string& val);

  void __set_generator(const std::string& val);

  void __set_publicKey(const std::string& val);

  bool operator == (const Token & rhs) const
  {
    if (!(prime == rhs.prime))
      return false;
    if (!(generator == rhs.generator))
      return false;
    if (!(publicKey == rhs.publicKey))
      return false;
    return true;
  }
  bool operator != (const Token &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Token & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Token &a, Token &b);

std::ostream& operator<<(std::ostream& out, const Token& obj);

typedef struct _AuthReq__isset {
  _AuthReq__isset() : token(false) {}
  bool token :1;
} _AuthReq__isset;

class AuthReq : public virtual ::apache::thrift::TBase {
 public:

  AuthReq(const AuthReq&);
  AuthReq& operator=(const AuthReq&);
  AuthReq() noexcept {
  }

  virtual ~AuthReq() noexcept;
  Token token;

  _AuthReq__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const AuthReq & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const AuthReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AuthReq &a, AuthReq &b);

std::ostream& operator<<(std::ostream& out, const AuthReq& obj);

typedef struct _AuthResp__isset {
  _AuthResp__isset() : publicKey(false) {}
  bool publicKey :1;
} _AuthResp__isset;

class AuthResp : public virtual ::apache::thrift::TBase {
 public:

  AuthResp(const AuthResp&);
  AuthResp& operator=(const AuthResp&);
  AuthResp() noexcept
           : publicKey() {
  }

  virtual ~AuthResp() noexcept;
  std::string publicKey;

  _AuthResp__isset __isset;

  void __set_publicKey(const std::string& val);

  bool operator == (const AuthResp & rhs) const
  {
    if (!(publicKey == rhs.publicKey))
      return false;
    return true;
  }
  bool operator != (const AuthResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AuthResp &a, AuthResp &b);

std::ostream& operator<<(std::ostream& out, const AuthResp& obj);



#endif
